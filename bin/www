#!/usr/bin/env node

/*require("babel-register")({
  presets: [
    'stage-0',
    'stage-3',
    'es2015',
    'es2016',
  ],
  "plugins": [
    "transform-runtime",
    "add-module-exports",
//       ["transform-runtime", {
//         "polyfill": false,
//         "regenerator": false
//       }],
       "transform-es2015-for-of",
       "syntax-object-rest-spread",
       "transform-es2015-parameters",
       "transform-object-rest-spread",
       "transform-async-to-generator",
       "transform-es2015-spread",
       "transform-es2015-destructuring",
       "transform-es2015-modules-commonjs",
       'transform-es2015-classes',
       "transform-strict-mode"
  ]
});*/
require('ts-node').register({
  //fast?: boolean
  //compiler?: string
  //noProject?: boolean
  //project?: string
  //ignoreWarnings?: Array<number | string>
  //disableWarnings: true
  //getFile?: (fileName: string) => string
  //getVersion?: (fileName: string) => string
  //getFileExists?: (fileName: string) => boolean
  compilerOptions: {
    'experimentalDecorators': true,
    'target': 'es6'
  }
});
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express1:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8081');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
